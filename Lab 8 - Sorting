{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMLNPrAWNHjoLh/9cmEHEt7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Choose a title below and show the sorting process based on the algorithm given\n","You may use any array or list you want for your programed algorithm.\n","\n","The array or list should have 10 element.\n","Complete the main code\n","\n","1.\tBubble Sort\n","2.\tInsertion Sort \n","3.\tMerge Sort\n","4.\tQuick Sort\n"],"metadata":{"id":"IrNMJY0BcHhp"}},{"cell_type":"markdown","source":["**Bubble Sort**"],"metadata":{"id":"aNHOauBWGIVi"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2_wUanqZFtux","executionInfo":{"status":"ok","timestamp":1670233945646,"user_tz":-480,"elapsed":627,"user":{"displayName":"Masyitah Abu","userId":"09327405912301893968"}},"outputId":"4577b398-f639-4e27-c4d4-b25680fd2fd7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array using bubble sort is:  [1, 2, 4, 5, 8]\n"]}],"source":["def bubblesort(arr):\n","  n = len(arr)#size of array\n","  #Traverse through all array element\n","  for i in range(n):\n","    #last i elements are already in place\n","    for j in range(0, n-i-1):\n","      #traverse the array from 0 to n-i-1\n","      #swap if the element found is greater than the next element\n","      if arr[j]>arr[j+1]:\n","        arr[j],arr[j+1] = arr[j+1],arr[j]\n","\n","#main code\n","array = "]},{"cell_type":"markdown","source":["Sorting process"],"metadata":{"id":"DxOi02PDdULC"}},{"cell_type":"markdown","source":["**Insertion Sort**"],"metadata":{"id":"RcaQMCMTFzmY"}},{"cell_type":"code","source":["def insertionsort(arr):\n","  #traverse through 1 to size of array\n","  for i in range(1,len(arr)):\n","    key = arr[i]#read array individually\n","    #move elements of arr[0,i-1], that are greater than key, to one position a head of their current position\n","    j = i-1\n","    while j >= 0 and key < arr[j]:\n","      arr[j+1] = arr[j]\n","      j-=1\n","    arr[j+1]=key\n","\n","#main code\n","array = \n","\n"],"metadata":{"id":"hrYTLnHNGOv9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670235375366,"user_tz":-480,"elapsed":8,"user":{"displayName":"Masyitah Abu","userId":"09327405912301893968"}},"outputId":"45c67202-13e0-43d1-dc65-9f217f9d0b15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array using insertion sort is:  [5, 6, 11, 12, 13]\n"]}]},{"cell_type":"code","source":["Sorting process"],"metadata":{"id":"rsvoJgxpdZtR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Merge Sort**"],"metadata":{"id":"nwj4qB_dGEjN"}},{"cell_type":"code","source":["# Python program for implementation of MergeSort\n","def mergeSort(arr):\n","\tif len(arr) > 1:\n","\n","\t\t# Finding the mid of the array\n","\t\tmid = len(arr)//2\n","\n","\t\t# Dividing the array elements\n","\t\tL = arr[:mid]\n","\n","\t\t# into 2 halves\n","\t\tR = arr[mid:]\n","\n","\t\t# Sorting the first half\n","\t\tmergeSort(L)\n","\n","\t\t# Sorting the second half\n","\t\tmergeSort(R)\n","\n","\t\ti = j = k = 0\n","\n","\t\t# Copy data to temp arrays L[] and R[]\n","\t\twhile i < len(L) and j < len(R):\n","\t\t\tif L[i] <= R[j]:\n","\t\t\t\tarr[k] = L[i]\n","\t\t\t\ti += 1\n","\t\t\telse:\n","\t\t\t\tarr[k] = R[j]\n","\t\t\t\tj += 1\n","\t\t\tk += 1\n","\n","\t\t# Checking if any element was left\n","\t\twhile i < len(L):\n","\t\t\tarr[k] = L[i]\n","\t\t\ti += 1\n","\t\t\tk += 1\n","\n","\t\twhile j < len(R):\n","\t\t\tarr[k] = R[j]\n","\t\t\tj += 1\n","\t\t\tk += 1\n","\n","# Code to print the list\n","def printList(arr):\n","\tfor i in range(len(arr)):\n","\t\tprint(arr[i], end=\" \")\n","\tprint()\n","\n","#main code\n","array = \n","\n"],"metadata":{"id":"NpVgVPFUGPxv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670237543323,"user_tz":-480,"elapsed":462,"user":{"displayName":"Masyitah Abu","userId":"09327405912301893968"}},"outputId":"69b0ef12-3848-4f2c-e018-0a98ab3a08f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array using merge sorted is:  [5, 6, 7, 11, 12, 13]\n"]}]},{"cell_type":"markdown","source":["**Quick Sort**"],"metadata":{"id":"00fN-8IiGGiq"}},{"cell_type":"code","source":["# Function to find the partition position of the array\n","def partition(array, low, high):\n","\t# Choose the rightmost element as pivot (can be the the right/left/,medium)\n","\tpivot = array[high]\n","\n","\t# Pointer for greater element\n","\ti = low - 1\n","\n","\t# Traverse through all elements\n","\t# compare each element with pivot\n","\tfor j in range(low, high):\n","\t\tif array[j] <= pivot:\n","\t\t\t# If element smaller than pivot is found\n","\t\t\t# swap it with the greater element pointed by i\n","\t\t\ti = i + 1\n","\n","\t\t\t# Swapping element at i with element at j\n","\t\t\t(array[i], array[j]) = (array[j], array[i])\n","\n","\t# Swap the pivot element with\n","\t# e greater element specified by i\n","\t(array[i + 1], array[high]) = (array[high], array[i + 1])\n","\n","\t# Return the position from where partition is done\n","\treturn i + 1\n","\n","# Function to perform quicksort\n","\n","def quick_sort(array, low, high):\n","\tif low < high:\n","\n","\t\t# Find pivot element such that\n","\t\t# element smaller than pivot are on the left\n","\t\t# element greater than pivot are on the right\n","\t\tpi = partition(array, low, high)\n","\n","\t\t# Recursive call on the left of pivot\n","\t\tquick_sort(array, low, pi - 1)\n","\n","\t\t# Recursive call on the right of pivot\n","\t\tquick_sort(array, pi + 1, high)\n","\n","\n","# main code\n","array = \n","\n"],"metadata":{"id":"iTKZxF0VGQqT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670235490306,"user_tz":-480,"elapsed":471,"user":{"displayName":"Masyitah Abu","userId":"09327405912301893968"}},"outputId":"5e99b9de-b268-4816-e675-b3cbf921b333"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sorted array: [1, 5, 7, 8, 9, 10]\n"]}]},{"cell_type":"markdown","source":["Sorting process"],"metadata":{"id":"TfJts3gtdfc4"}}]}